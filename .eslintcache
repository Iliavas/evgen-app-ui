[{"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\index.tsx":"1","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\routing.jsx":"2","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\client.js":"3","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\registration.tsx":"4","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\LobbyContentRouter.tsx":"5","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\organisations.tsx":"6","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childContext.ts":"7","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\checkToken.ts":"8","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\getToken.ts":"9","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\login-inputs.tsx":"10","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\registration-inputs.tsx":"11","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\teacherLobbyContentRouter.tsx":"12","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childLobbyContentRouter.tsx":"13","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Buttons.tsx":"14","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\orgCard.tsx":"15","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\generated\\graphql.tsx":"16","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\wirteToken.ts":"17","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\MUTATIONS\\registerUser.ts":"18","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\MUTATIONS\\getToken.ts":"19","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Inputs.tsx":"20","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childSubjectWidget.tsx":"21","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\teacherClasses.tsx":"22","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\QUERIES\\getTeacherSubjects.ts":"23","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Cards.tsx":"24","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\subjectDetail.tsx":"25","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\teacherClassCard.tsx":"26","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\QUERIES\\getLessonInfo.ts":"27","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\lessonDetails.tsx":"28","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\lessonWidget.tsx":"29","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\createMaterial.tsx":"30","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\editor.jsx":"31","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\toggleButton.tsx":"32","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\testCreation.tsx":"33","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Calendar.jsx":"34","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\timestamp.jsx":"35"},{"size":249,"mtime":1612479568311,"results":"36","hashOfConfig":"37"},{"size":879,"mtime":1612601968961,"results":"38","hashOfConfig":"37"},{"size":474,"mtime":1612475612240,"results":"39","hashOfConfig":"37"},{"size":2996,"mtime":1612602173233,"results":"40","hashOfConfig":"37"},{"size":3300,"mtime":1612130772226,"results":"41","hashOfConfig":"37"},{"size":2095,"mtime":1612602200909,"results":"42","hashOfConfig":"37"},{"size":158,"mtime":1612440111816,"results":"43","hashOfConfig":"37"},{"size":85,"mtime":1611771070488,"results":"44","hashOfConfig":"37"},{"size":76,"mtime":1611839004045,"results":"45","hashOfConfig":"37"},{"size":1273,"mtime":1612602865777,"results":"46","hashOfConfig":"37"},{"size":1469,"mtime":1612602763649,"results":"47","hashOfConfig":"37"},{"size":895,"mtime":1612106993713,"results":"48","hashOfConfig":"37"},{"size":995,"mtime":1612096304729,"results":"49","hashOfConfig":"37"},{"size":1137,"mtime":1612423967061,"results":"50","hashOfConfig":"37"},{"size":1041,"mtime":1612001486457,"results":"51","hashOfConfig":"37"},{"size":83402,"mtime":1612556391120,"results":"52","hashOfConfig":"37"},{"size":162,"mtime":1611771070488,"results":"53","hashOfConfig":"37"},{"size":217,"mtime":1611771070489,"results":"54","hashOfConfig":"37"},{"size":198,"mtime":1611771070489,"results":"55","hashOfConfig":"37"},{"size":675,"mtime":1612450429638,"results":"56","hashOfConfig":"37"},{"size":2339,"mtime":1612427748240,"results":"57","hashOfConfig":"37"},{"size":1948,"mtime":1612126267317,"results":"58","hashOfConfig":"37"},{"size":370,"mtime":1612125431591,"results":"59","hashOfConfig":"37"},{"size":6078,"mtime":1611971375175,"results":"60","hashOfConfig":"37"},{"size":2681,"mtime":1612130993509,"results":"61","hashOfConfig":"37"},{"size":1350,"mtime":1612122396861,"results":"62","hashOfConfig":"37"},{"size":333,"mtime":1612089889087,"results":"63","hashOfConfig":"37"},{"size":10521,"mtime":1612532800080,"results":"64","hashOfConfig":"37"},{"size":2138,"mtime":1612019857272,"results":"65","hashOfConfig":"37"},{"size":5286,"mtime":1612475898408,"results":"66","hashOfConfig":"37"},{"size":1385,"mtime":1612555625174,"results":"67","hashOfConfig":"37"},{"size":1909,"mtime":1612432218161,"results":"68","hashOfConfig":"37"},{"size":10067,"mtime":1612599897037,"results":"69","hashOfConfig":"37"},{"size":2632,"mtime":1612518518090,"results":"70","hashOfConfig":"37"},{"size":3511,"mtime":1612517912177,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},"12khao8",{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"75"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"75"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"75"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"75"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"75"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"75"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"75"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"75"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"75"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\index.tsx",["159","160"],"import react from \"react\";\r\n\r\nimport ReactDom from \"react-dom\";\r\n\r\nimport {Card} from \"./uiKit/TestCardHW\"\r\n\r\nimport {Routing} from \"./screens/content/routing.jsx\"\r\n\r\nReactDom.render(\r\n    <Routing></Routing>,\r\n    document.getElementById(\"root\")\r\n)",["161","162"],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\routing.jsx",["163","164","165"],"import React from \"react\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\"\r\nimport {\r\n    ApolloProvider\r\n} from \"@apollo/client\"\r\nimport client from \"../../client\"\r\n\r\nimport {Registration} from \"./registration\"\r\n\r\nimport {OrganisationList} from \"./organisations\";\r\n\r\nimport {ChildLobby} from \"./LobbyContentRouter\";\r\n\r\nimport {checkToken} from \"../../LocalStorageInteraction/checkToken\"\r\n\r\nexport const Routing = () => {\r\n\r\n    return <ApolloProvider client={client}>\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/enter-user\">\r\n                    <Registration></Registration>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <OrganisationList></OrganisationList>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    </ApolloProvider>\r\n;\r\n}",["166","167"],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\client.js",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\registration.tsx",["168","169","170","171","172"],"import react from \"react\";\r\n\r\nimport \"../css/registration.css\";\r\n\r\nimport {DefaultButton} from \"../../uiKit/Buttons\";\r\n\r\nimport {DefaultInput} from \"../../uiKit/Inputs\";\r\n\r\nimport vkImg from \"../svg/VkImage.svg\";\r\nimport googleImg from \"../svg/googleImg.svg\";\r\n\r\nimport {Login_inputs} from \"./login-inputs\";\r\nimport {Registration_inputs} from \"./registration-inputs\";\r\n\r\nimport {checkToken} from \"../../LocalStorageInteraction/checkToken\"\r\n\r\nimport {\r\n    Link, Switch, Route, useRouteMatch, useLocation, Redirect\r\n} from \"react-router-dom\";\r\n\r\nexport const Registration:react.FC = () => {\r\n    const {path, url} = useRouteMatch();\r\n    const location = useLocation();\r\n    console.log(location);\r\n    const isSign = location.pathname.split(\"/\").pop() == \"Login\";\r\n    if (checkToken()) return <Redirect to=\"\"></Redirect>\r\n    return (\r\n    <div className=\"centered\">\r\n        <div className=\"registration__container\">\r\n            <div className=\"heading-evgen-app\">Добро пожаловать в EvgenApp</div>\r\n            <div className=\"toggle__reg\">\r\n                <Link to=\"/enter-user/Login\">                \r\n                    <div className={\"toggle-text \" + (isSign ? \"\" : \"disabled\")}>Вход</div>\r\n                </Link>\r\n                <Link to=\"/enter-user/Registration\">\r\n                    <div className={\"toggle-text \" + (isSign ? \"disabled\": \"\")}>Регистрация</div>\r\n                </Link>\r\n            </div>\r\n            <Switch>\r\n                <Route path={`${url}/Login`}>\r\n                    <Login_inputs></Login_inputs>\r\n                </Route>\r\n                <Route path={`${url}/Registration`}>\r\n                    <Registration_inputs></Registration_inputs>\r\n                </Route>\r\n            </Switch>\r\n            <div className=\"or-container\">\r\n                <div className=\"line\"></div>\r\n                <div className=\"or-content\">или</div>\r\n                <div className=\"line\"></div>\r\n            </div>\r\n            <DefaultButton handleClick={()=>{}} class=\"reg-btn vk-btn\">\r\n                <div className=\"vk-button\">\r\n                    <img src={vkImg} alt=\"\" className=\"vk-button__img\"/>\r\n                    <span className=\"vk-button__text\">\r\n                        <span>\r\n                        Войти с помощью VK\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </DefaultButton>\r\n            <DefaultButton handleClick={()=>{}} class=\"reg-btn google-btn\">\r\n                <div className=\"vk-button\">\r\n                        <img src={googleImg} alt=\"\" className=\"vk-button__img\"/>\r\n                        <span className=\"vk-button__text\">\r\n                            <span className=\"google-text-color\">\r\n                            Войти с помощью Google\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n            </DefaultButton>\r\n        </div>\r\n    </div>\r\n    );\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\LobbyContentRouter.tsx",["173","174","175"],"import react, {useState} from \"react\"\r\n\r\nimport \"../css/lobby.css\";\r\n\r\nimport {\r\n    useParams, useRouteMatch, Link, Switch, Route, Redirect\r\n} from \"react-router-dom\"\r\n\r\n\r\nimport {\r\n    IEGetParams,\r\n    IEMenuItem\r\n} from \"./interfaces\"\r\n\r\nimport {ChildContext} from \"./childContext\";\r\nimport {ChildLobbyContentRouter} from \"./childLobbyContentRouter\"\r\nimport {TeacherLobbyContentRouter} from \"./teacherLobbyContentRouter\";\r\n\r\ninterface IELobby{\r\n    items: Map<string, IEMenuItem>,\r\n    ContentRouter: react.ReactNode,\r\n    defaultPath:string,\r\n    createWork:string\r\n}\r\n\r\nexport const LobbyContentRouter:react.FC = () => {\r\n    let items: Map<string, IEMenuItem>;\r\n    const {url} = useRouteMatch()\r\n    const {type} = useParams<IEGetParams>();\r\n    switch (type) {\r\n        case \"child\":\r\n            items = new Map([\r\n                [\"subjects\", {name: \"Предметы\"}],\r\n                [\"homework\", {name: \"Домашняя работа\"}],\r\n                [\"marks\", {name: \"Оценки\"}],\r\n                [\"add-material\", {name: \"Доп. материал\"}]\r\n            ]);\r\n\r\n            return <Lobby createWork=\"\" defaultPath=\"subjects\" items={items} ContentRouter={\r\n                <ChildLobbyContentRouter></ChildLobbyContentRouter>}></Lobby>\r\n        case \"teacher\":\r\n            items = new Map([\r\n                [\"my-classes\", {name: \"Мои классы\"}],\r\n                [\"create-work\", {name:\"Создать работу\"}],\r\n                [\"check-works\", {name:\"Проверить работы\"}],\r\n                [\"works-archieve\", {name: \"Архив работ\"}]\r\n            ])\r\n            return <Lobby createWork={`${url}/create-work`} defaultPath=\"my-classes\" items={items} ContentRouter={\r\n                <TeacherLobbyContentRouter></TeacherLobbyContentRouter>\r\n            }></Lobby>\r\n    }\r\n    return <div>error</div>\r\n}\r\n\r\nexport const Lobby:react.FC<IELobby> = (props) => {\r\n    const [activeName, setActiveName] = useState(props.defaultPath)\r\n    const {url} = useRouteMatch();\r\n    const {id, type, action} = useParams<IEGetParams>();\r\n\r\n    let widgets: react.ReactNode[] = [];\r\n    for (let item of props.items){\r\n        widgets.push(\r\n            <Link to={`${url}/${item[0]}`}>\r\n                <div className={`${activeName == item[0] ? \"active\" : \"\"}`} key={item[1].name}>\r\n                    {item[1].name}\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    return <ChildContext.Provider value={{id, setActiveName, createWorkLink:props.createWork}}>\r\n        <div className=\"lobby__container\">\r\n        <div className=\"lobby__menu\">\r\n            <div className=\"lobby__heading\">\r\n                EvgenApp\r\n            </div>\r\n            <div className=\"lobby-menu__content\">\r\n                {widgets}\r\n            </div>\r\n            <div className=\"company\">© Gladio. Dev</div>\r\n        </div>\r\n        <div className=\"lobby__content\">\r\n            <Switch>\r\n                <Route path={`${url}/:type`}>\r\n                    {props.ContentRouter}\r\n                </Route>\r\n                <Route path={`${url}/`}>\r\n                    <Redirect to={`${url}/${props.defaultPath}`}></Redirect>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    </div>\r\n    </ChildContext.Provider>\r\n     \r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\organisations.tsx",["176","177","178","179","180"],"import react from \"react\"\r\n\r\nimport {OrgCard} from \"../../uiKit/orgCard\";\r\n\r\nimport \"../css/org-list.css\"\r\n\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {getUserOrg} from \"../../QUERIES/getOrg\"\r\n\r\nimport {getToken} from \"../../LocalStorageInteraction/getToken\";\r\n\r\nimport {IEDataProcessing} from \"./interfaces\"\r\n\r\nimport {\r\n    Route, Switch, Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport {checkToken} from \"../../LocalStorageInteraction/checkToken\";\r\n\r\nimport {\r\n    LobbyContentRouter\r\n} from \"./LobbyContentRouter\";\r\n\r\nimport {useUserInfoQuery} from \"../../generated/graphql\";\r\n\r\nfunction Processing(arrayProcessed:any, role:string) {\r\n    let result = []\r\n    let links = []\r\n    for (const childProfile of arrayProcessed){\r\n        result.push(<OrgCard\r\n            subjects={childProfile.node.org.subjects}\r\n            name={childProfile.node.org.name}\r\n            childLen={childProfile.node.org.childrenLength}\r\n            classesLen={childProfile.node.org.classesLength}\r\n            role={role}\r\n            id={childProfile.node.id}\r\n        ></OrgCard>);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const OrganisationList:react.FC = () =>{\r\n    const {loading, error, data} = useUserInfoQuery({variables: {id: getToken()!}})\r\n    if (loading) return <div>loading...</div>\r\n    console.log(data)\r\n    if (!checkToken()) {\r\n        return <Redirect to=\"/enter-user/Registration\"></Redirect>\r\n    }\r\n    return <Switch>\r\n        <Route path=\"/:id/:type/\">\r\n            <LobbyContentRouter></LobbyContentRouter>\r\n        </Route>\r\n        <Route path=\"/\">\r\n            <div className=\"centered\">\r\n                <div className=\"org-list__public\">\r\n                    <div className=\"heading\">Мои организации</div>\r\n                    <div className=\"org-list__container\">\r\n                        {Processing(data?.userInfo?.profile?.childSet.edges, \"child\")}\r\n                        {Processing(data?.userInfo?.profile?.teacherSet.edges, \"teacher\")}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Route>\r\n\r\n    </Switch>\r\n\r\n\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childContext.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\checkToken.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\getToken.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\login-inputs.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\registration-inputs.tsx",["181"],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\teacherLobbyContentRouter.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childLobbyContentRouter.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Buttons.tsx",["182","183","184","185","186","187","188"],"import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./css/Buttons.css\"\r\nimport download from \"../images/download.svg\"\r\nimport { CSSProperties } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ButtonsConfig{\r\n    text?:String;\r\n    handleClick:Function;\r\n    style?:boolean;\r\n    class?:string;\r\n    children?:React.ReactNode;\r\n};\r\n\r\nexport const DefaultButton : React.FC<ButtonsConfig> = (props) => {\r\n    const btnStyle = {\r\n        width:\"30vw\",\r\n        height:\"5vw\"\r\n    };\r\n    const classes = \"defaultButton \" + (props.class == undefined ? \"\" : props.class);\r\n    return (\r\n        <button className={classes} style={props.style == true? btnStyle:{}} onClick={()=> props.handleClick()}>{props.children}</button>\r\n    );\r\n}\r\n\r\nexport const DownloadButton : React.FC<ButtonsConfig> = (props) => {\r\n    return (\r\n        <button className=\"DownloadButton\" onClick={()=> props.handleClick()}><img src={download}></img></button>\r\n    );\r\n}\r\n\r\ninterface ToogleConfig{\r\n    handleChange:Function;\r\n    buttons:Array<string>;\r\n}\r\n\r\n\r\n/*\r\n-uikit\r\n    ToggleButton\r\n        -index.tsx\r\n        toggleButton.module.css\r\n*/","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\orgCard.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\generated\\graphql.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\LocalStorageInteraction\\wirteToken.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\MUTATIONS\\registerUser.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\MUTATIONS\\getToken.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Inputs.tsx",["189","190","191","192"],"import { type } from 'os';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./css/InputField.css\"\r\n\r\ninterface InputsConfig{\r\n    placeHolder?:string;\r\n    handleChange?:Function;\r\n    value?:string;\r\n    type?: string;\r\n    class?:string;\r\n};\r\n\r\nexport const DefaultInput : React.FC<InputsConfig> = (props) => {   \r\n    const classes = \"myInput \" + (props.class == undefined ? \"\" : props.class); \r\n    return (\r\n        <input className={classes} placeholder={props.placeHolder} onChange={\r\n            (event)=> props.handleChange != undefined ? props.handleChange(event) : {}} \r\n            type={props.type} value={props.value!}></input>\r\n    );\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\childSubjectWidget.tsx",["193","194","195"],"import react, {useContext} from \"react\";\r\n\r\nimport \"../css/childSubjectWidget.css\"\r\n\r\nimport {SubjectCard} from \"../../uiKit/Cards\";\r\n\r\nimport {\r\n    useQuery\r\n} from \"@apollo/client\";\r\nimport {\r\n    Switch, Route, Link, useLocation, useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\nimport {subjectInfoQuery} from \"../../QUERIES/getSubjectInfo\"\r\n\r\nimport {ChildContext} from \"./childContext\";\r\n\r\nimport {SubjectDetail} from \"./subjectDetail\"\r\n\r\nimport {useChildSubjectsQuery} from \"../../generated/graphql\"\r\n\r\ninterface QueryData{\r\n    node: {\r\n        name:string\r\n        classes: {\r\n            name:string,\r\n            id:string\r\n            teachersSet: {\r\n                name:string\r\n            }[]\r\n        }[]\r\n    }\r\n}\r\n\r\nfunction parseData(data:any, location:string){\r\n    console.log(data);\r\n    let res = [];\r\n    for (let elem of data){\r\n        for (let subject of elem.node.classes) {\r\n            let teacherNames = []\r\n            for (let teacher of subject.teachersSet){\r\n                teacherNames.push(teacher.name)\r\n            }\r\n            res.push(\r\n                <Link to={`${location}/${subject.id}`} className=\"subject__link\">\r\n                    <SubjectCard\r\n                        teacher={teacherNames.join(\", \")}\r\n                        subject={subject.name}\r\n                        onClick = {() => {}}\r\n                        class={elem.node.name}\r\n                    ></SubjectCard>\r\n                </Link>\r\n);  \r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport const ChildSubject:react.FC = (props) => {\r\n    const location = useLocation();\r\n    const {id} = useContext(ChildContext);\r\n    const match = useRouteMatch();\r\n    console.log(match.url)\r\n    const {loading, data} = useChildSubjectsQuery({variables: {id:id}})\r\n    if (loading) return <div>loading...</div>\r\n    console.log(data?.child?.groups.edges);\r\n    let res = parseData(data?.child?.groups.edges, match.url);\r\n    return <Switch>\r\n        <Route path={`${match.url}/:id`}>\r\n            <SubjectDetail></SubjectDetail>\r\n        </Route>\r\n\r\n        <Route path={`${location.pathname}`}>\r\n            <div className=\"subjects__container\">\r\n                <div className=\"subjects__heading\">Основные предметы</div>\r\n                {res}\r\n            </div>\r\n        </Route>\r\n    </Switch>             \r\n\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\teacherClasses.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\QUERIES\\getTeacherSubjects.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Cards.tsx",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./css/Cards.css\";\r\nimport image1 from \"../images/cardImg.svg\";\r\nimport image2 from \"../images/cardImg1.svg\";\r\nimport image3 from \"../images/cardImg2.svg\";\r\nimport image4 from \"../images/cardImg3.svg\";\r\nimport image5 from \"../images/cardImg4.svg\";\r\nimport {DefaultButton} from \"./Buttons\"\r\nimport { TaskRow } from './ChildTestDetail';\r\n\r\n\r\ninterface SubjectConfig{\r\n    teacher:string;\r\n    subject:string;\r\n    date?:Date;\r\n    newTasks?:number;\r\n    class:string;\r\n    onClick:Function;\r\n};\r\n\r\nexport const SubjectCard : React.FC<SubjectConfig> = (props) => {\r\n    function getRandomInt(min:number, max:number) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min; \r\n      }\r\n\r\n    let image;\r\n\r\n    let images = [image5,image1,image2,image3,image4]\r\n\r\n    image = images[getRandomInt(0,images.length)]\r\n    return (\r\n        <button className=\"SbCard\" onClick={(event)=>props.onClick(event)}>\r\n            <div className=\"card__content\">\r\n                <div className=\"subDiv\">\r\n                    <div className=\"group\">\r\n                        <div className=\"SubjectText\">{props.subject}</div>\r\n                        <div className=\"TeacherText\">{props.teacher}</div>\r\n                    </div>\r\n                    <div className=\"back_label\">Класс: <span className=\"colorized\">{props.class}</span></div>\r\n                </div>\r\n                <div className=\"taskDiv\">\r\n                    <div className={props.newTasks==undefined? \"noTasks\":\"newTasks\"}>{props.newTasks==undefined? \"Нет заданий\":`Новое задание(${props.newTasks})`}</div>\r\n                    <div className=\"TeacherText\">\r\n                        {props.newTasks==undefined? \"\": props.date == undefined? \"\":\"до \" + props.date?.getDate() + \".\" + props.date?.getMonth()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <img className=\"image\" src={image}></img>\r\n            \r\n\r\n        </button>\r\n    );\r\n}\r\n\r\ninterface TaskConfig{\r\n    subject:string;\r\n    theme:string;\r\n    teacher:string;\r\n    period?:Date;\r\n    questions:number;\r\n    minuts?:number;\r\n    task:Function;\r\n}\r\n\r\nfunction declOfNum(number:number, words:Array<string>) {  \r\n    return words[(number % 100 > 4 && number % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(number % 10 < 5) ? number % 10 : 5]];\r\n}\r\n\r\nexport const TaskCard :React.FC<TaskConfig> = (props) => {\r\n\r\n\r\n    return(\r\n        <div className=\"tkCard\">\r\n            <span className=\"SubjectText\">{props.subject}</span>\r\n            <p>\r\n                <span className=\"noTasks\">{props.theme}</span><br></br>\r\n                <span className=\"TeacherText\">{props.teacher}</span><br></br>\r\n                <span className=\"TeacherText\">{props.period==undefined? \"не ограничено\": \"до \" + props.period?.getDate() + \".\" + props.period?.getMonth()+\".\"+props.period?.getFullYear()+\"    \"+props.period.getHours()+\":\"+ props.period.getMinutes()}</span>\r\n\r\n\r\n            </p>\r\n            <p>\r\n                <span className=\"noTasks\">{props.questions.toString() + declOfNum(props.questions, [\" вопрос\",\" вопроса\",\" вопросов\"])}</span><br></br>\r\n                <span className=\"noTasks\">{props.minuts==undefined? \"Время на выполнение неограничено\": props.minuts.toString() + declOfNum(props.minuts,[' минута', ' минуты', ' минут' + \" \"])}\r\n                    {props.minuts==undefined? \"\":<span className=\"TeacherText\"> на выполнение</span>}\r\n                </span>\r\n            </p>\r\n\r\n            <DefaultButton text=\"начать выполнение\" handleClick={()=>props.task()} style={true}></DefaultButton>\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface GradeConfig{\r\n    subject:string;\r\n    theme:string;\r\n    teacher:string;\r\n    period?:Date;\r\n    grade_num?:number;\r\n    grade_text?:string;\r\n    exeptions?:number;\r\n}\r\n\r\nexport const GradeCard :React.FC<GradeConfig> = (props) => {\r\n\r\n    function declOfNum(number:number, words:Array<string>) {  \r\n        return words[(number % 100 > 4 && number % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(number % 10 < 5) ? number % 10 : 5]];\r\n    }\r\n    return(\r\n        <div className=\"tkCard\">\r\n            <span className=\"SubjectText\">{props.subject}</span>\r\n            <p>\r\n                <span className=\"noTasks\">{props.theme}</span><br></br>\r\n                <span className=\"TeacherText\">{props.teacher}</span><br></br>\r\n                <span className=\"TeacherText\">{props.period==undefined? \"не ограничено\": \"до \" + props.period?.getDate() + \".\" + props.period?.getMonth()+\".\"+props.period?.getFullYear()+\"    \"+props.period.getHours()+\":\"+ props.period.getMinutes()}</span>\r\n\r\n\r\n            </p>\r\n            <div className=\"p\">\r\n                <span className=\"grade\">{props.grade_num == undefined? props.grade_text:props.grade_num}</span>\r\n                <span className=\"SubjectText\" style={{color:\"#565656\", display:\"flex\", justifyContent:\"flex-end\", flexDirection:\"column\"}}><span style={{display:\"block\",position:\"relative\",bottom:\"0\" }}>{props.exeptions == undefined? \"\":props.exeptions + declOfNum(props.exeptions, [\" ошибка\", \" ошибки\", \" ошибок\"])}</span></span>\r\n            </div>\r\n\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface GradeSubject{\r\n    subject:string;\r\n    grades:Array<any>\r\n}\r\n\r\nexport const GradeSubjectCard : React.FC<GradeSubject> = (props) => {\r\n\r\n    let classNames = [\"grayGrade\",\"grayGrade\",\"grayGrade\",\"purpleGrade\",\"purpleGrade\"]\r\n    let grades = new Array()\r\n\r\n    props.grades.forEach((el:any) => {\r\n        grades.push(<span className={classNames[el-1]}>{\"  \"+ el +\"   \"}</span>)\r\n      })\r\n\r\n    return (\r\n        <div className=\"SbCard\">\r\n            <p className=\"sbp\">\r\n                <span className=\"SubjectText\">{props.subject}</span><br/>\r\n                {grades}\r\n            </p>\r\n        </div>\r\n    );\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\subjectDetail.tsx",["212","213"],"import react, {useContext} from \"react\";\r\n\r\nimport {LessonWidget} from \"../../uiKit/lessonWidget\";\r\n\r\nimport \"../css/subject-detail.css\"\r\n\r\nimport {useQuery} from \"@apollo/client\";\r\n\r\nimport {lessonInfoQuery} from \"../../QUERIES/getLessonInfo\"\r\n\r\nimport {ChildContext} from \"./childContext\";\r\nimport {\r\n    useParams, Switch, Route, useRouteMatch, Link\r\n} from \"react-router-dom\";\r\nimport {LessonDetails} from \"./lessonDetails\";\r\nimport { create } from \"domain\";\r\n\r\n\r\ninterface IEParams{\r\n    id:string;\r\n}\r\n\r\ninterface IESubjectDetail{\r\n    isTeacher?:boolean;\r\n}\r\n\r\ninterface IECreationButton{\r\n    link:string;\r\n}\r\n\r\ninterface QueryData{\r\n    node: {\r\n        name:string,\r\n        descr:string,\r\n        testsLen:number,\r\n        materialsLen:number,\r\n        timeLesson:string,\r\n        id:string\r\n    }\r\n}\r\n\r\nfunction parseQuery(data:QueryData[], path:string){\r\n    console.log(data, \"data\")\r\n    let res = []\r\n    for (let node of data){\r\n        res.push(\r\n            <Link to={`${path}/${node.node.id}`}>\r\n                <LessonWidget\r\n                    theme={node.node.name}\r\n                    date={node.node.timeLesson}\r\n                    descr={node.node.descr}\r\n                    materialsLen={node.node.materialsLen}\r\n                    testsLen={node.node.testsLen}\r\n                ></LessonWidget>\r\n            </Link>\r\n\r\n        )\r\n    }\r\n    return res;\r\n}\r\n\r\nconst CreateButton:react.FC<IECreationButton> = (props) => {\r\n    return <Link to={`${props.link}`}>\r\n        <div className=\"create-button__container\">\r\n            Создать\r\n        </div>\r\n    </Link>\r\n\r\n}\r\n\r\nexport const SubjectDetail:react.FC<IESubjectDetail> = () => {\r\n    const {createWorkLink} = useContext(ChildContext)\r\n    const {url} = useRouteMatch()\r\n    const {id} = useParams<IEParams>()\r\n    const {loading, data} = useQuery(lessonInfoQuery, {variables:{id:id}});\r\n    if (loading) return <div>loading..</div>\r\n    console.log(data)\r\n    let res = parseQuery(data.subjectClass.lessonSet.edges, url)\r\n    return <Switch>\r\n        <Route path={`${url}/:id`}>\r\n            <LessonDetails></LessonDetails>\r\n        </Route>\r\n        <Route path={url}>\r\n            <div className=\"subject-detail__container\">\r\n                <div className=\"subject-detail__heading\">\r\n                    <p>\r\n                        {`${data.subjectClass.name}, ${data.subjectClass.group.name}`}\r\n                    </p>\r\n                    {\r\n                    createWorkLink != \"\" ? <CreateButton link={createWorkLink}></CreateButton> : <div></div>\r\n                    }\r\n                </div>\r\n                {res}\r\n            </div>\r\n        </Route>\r\n    </Switch> \r\n\r\n} ","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\teacherClassCard.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\QUERIES\\getLessonInfo.ts",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\lessonDetails.tsx",["214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"import react, {useContext, Context, useState, useReducer, useEffect} from \"react\"\r\nimport {ChildContext} from \"./childContext\";\r\nimport \"../css/lesson-detail.css\";\r\n\r\nimport {Editor} from \"../../uiKit/editor\";\r\n\r\nimport {useHistory, useParams, useRouteMatch} from \"react-router-dom\";\r\nimport client from \"../../client\";\r\n\r\n\r\nimport {\r\n    useGetLessonsInfoQuery, \r\n    useDeleteMaterialMutation,\r\n    GetLessonsInfoDocument,\r\n    UserInfoDocument,\r\n    useChangelessonMutation,\r\n    useCreateTestMutation\r\n} from \"../../generated/graphql\";\r\n\r\nimport {Link, Switch, Route} from \"react-router-dom\";\r\n\r\nimport {CreateMaterialWidget} from \"./createMaterial\"\r\n\r\nimport bin from \"../../images/trash-empty.svg\";\r\n\r\nimport {TestCreation, TestCreateWidget} from \"./testCreation\"\r\nimport { create } from \"domain\";\r\n\r\n\r\n\r\ninterface IEParams{\r\n    id:string;\r\n}\r\n\r\nconst TeacherContext = react.createContext({\r\n    changeMaterials: () => {},\r\n    \r\n})\r\n\r\n\r\ninterface IEQuery{\r\n    name:string,\r\n    content:string,\r\n    descr:string,\r\n    typeLesson: {\r\n        name:string,\r\n        group:{\r\n            name:string\r\n        }\r\n    }\r\n    tests: {\r\n        name:string,\r\n        id:string,\r\n        taskLen:number,\r\n        deadline:string\r\n    }[]\r\n    materials: {\r\n        name:string,\r\n        data:string, id:string\r\n    }[]\r\n}\r\n\r\nfunction parseMaterials(data:IEQuery){\r\n    let res = []\r\n    for (let material of data.materials){\r\n        res.push(\r\n            <NewMaterialCard\r\n                name={material.data}\r\n                id={material.id}\r\n            ></NewMaterialCard>\r\n        )\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n\r\nfunction parseTeacherTests(data:IEQuery){\r\n}\r\n\r\ninterface IELessonDetail{\r\n    data: any,\r\n    id: string, url:string;\r\n}\r\n\r\nconst ChildLessonDetail:react.FC<IELessonDetail> = (props) => {\r\n    const data = props.data;\r\n    return <div className=\"lesson-details__container\">\r\n    <div className=\"lesson-details__heading\">\r\n        {data.typeLesson.name}, {data.typeLesson.group.name}, {data.name}, 27.09\r\n        <Editor content={data!.content}></Editor>\r\n        <div className=\"materials\">\r\n            <div className=\"lesson-details__heading\">\r\n                Материалы\r\n            </div>\r\n            <div className=\"materials__content\">\r\n                {parseMaterials(data)}\r\n            </div>\r\n        </div>\r\n        <div className=\"tests\">\r\n            <div className=\"lesson-details__heading\">Тесты</div>\r\n            <div className=\"materials__content\">\r\n                {parseTests(data, props.url)}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n}\r\n\r\ninterface IEMaterialCard{\r\n    name:string;\r\n    id:string;\r\n}\r\n\r\nconst NewMaterialCard:react.FC<IEMaterialCard> = (props) => {\r\n    const {url} = useRouteMatch()\r\n    const {changeMaterials} = useContext(TeacherContext)\r\n    const [deleteMaterial] = useDeleteMaterialMutation({variables: {id:props.id}});\r\n    return <div>\r\n        <div className=\"teacher-material\">\r\n        <img src={bin} alt=\"\" className=\"teacher-material__delete-button\"\r\n            onClick = {(e) => {\r\n                deleteMaterial({variables: {id:props.id}})\r\n                window.location.reload()\r\n            }}\r\n            />\r\n            <Link to={`${url}/materials/${props.id}`} className=\"link teacher-materail__flex\">\r\n                <span className=\"teacher-material__text\">\r\n                    {props.name}\r\n                </span>\r\n            </Link>\r\n\r\n        </div>\r\n\r\n    </div>\r\n        \r\n}\r\ninterface IETestCard{\r\n    name:string;\r\n    questions:number;\r\n    id?:string;\r\n}\r\nconst NewTestCard:react.FC<IETestCard> = (props) => {\r\n    return <div className=\"teacher-test-card__container\">\r\n            <div className=\"test-card__heading\">Тест.{props.name}</div>\r\n            <div className=\"test-card__questions\"> Вопросов:&nbsp;<span className=\"colorize\"> {props.questions} </span></div>\r\n        </div>\r\n}\r\n\r\ninterface IEPlusButton{\r\n    OnClick:Function;\r\n    link?:string;\r\n}\r\n\r\nconst PlusButon:react.FC<IEPlusButton> = (props) => {\r\n\r\n    return <Link to={props.link!}>\r\n        <div className=\"teacher-material teacher-material__add-button\" onClick={props.OnClick()}>\r\n            <div className=\"teacher-materail__flex\">\r\n                <span className=\"plus\">+</span>\r\n            </div>\r\n        </div>\r\n    </Link> \r\n}\r\n\r\nfunction parseTests(data:IEQuery, url:string){\r\n    let res = []\r\n    for (let test of data.tests){\r\n        res.push(\r\n            <Link to={`${url}/tests/${test.id}`}>\r\n                <NewTestCard\r\n                    name={test.name}\r\n                    questions={test.taskLen}\r\n                ></NewTestCard>\r\n            </Link>\r\n\r\n        );\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nconst TeacherLessonDetail:react.FC<IELessonDetail> = (props) => {\r\n    const [changeLesson] = useChangelessonMutation();\r\n    const history = useHistory();\r\n    const [createTest] = useCreateTestMutation({onCompleted: (data) => {\r\n        history.push(`${url}/tests/${data.createTest?.test?.id}`);\r\n    }, variables: {lessonID: props.id}})\r\n    const {url} = useRouteMatch();\r\n    const [data, setData] = useState(props.data.lessons);\r\n    let [name, setName] = useState(data.name)\r\n    let [descr, setDescr] = useState(data.descr)\r\n    return <Switch>\r\n        <Route path={`${url}/tests/create`}>\r\n                    <TestCreateWidget id={props.id}></TestCreateWidget>\r\n        </Route>\r\n        <Route path={`${url}/tests/:id`}>\r\n            <TestCreation></TestCreation>\r\n        </Route>\r\n        <Route path={url}>\r\n        <div>\r\n        <div className=\"lesson-details__container\">\r\n    <div className=\"lesson-details__heading\">\r\n        {data.typeLesson.name}, {data.typeLesson.group.name}, {data.name}, 27.09\r\n    </div>\r\n    <div className=\"teacher-lesson-detail__container\">\r\n        <div className=\"teacher-lesson-detail__heading\">\r\n            <div className=\"teacher-lesson-detail__info\">\r\n                <div className=\"teacher-lesson-detail__class-name\">\r\n                    8.3 класс\r\n                </div>\r\n                <div className=\"teacher-lesson-detail__subject-name\">\r\n                    Английский язык\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"teacher-lesson__times\">\r\n                <div className=\"deadline__date\">\r\n                    урок доступен с <span className=\"colorize\">27.09 </span>\r\n                    до <span className=\"colorize\">27.10</span> \r\n                </div>\r\n                <div className=\"deadline__time\">\r\n                    с <span className=\"colorize\">11:00</span> до <span className=\"colorize\">22:00</span>\r\n                </div>\r\n                <div className=\"change__time\">\r\n                    Изменить время\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"teacher-lesson__content\">\r\n            <div className=\"teacher-content__first-row\">\r\n                <div className=\"teacher-lesson__theme\">\r\n                    <div className=\"teacher-lesson-theme__heading\">\r\n                        Тема урока\r\n                    </div>\r\n                    <input type=\"text\" placeholder=\"Введите тему урока\" \r\n                        className=\"lesson-theme__input\" value={name}\r\n                        onChange = {(e:any) => {setName(e.target.value);\r\n                            changeLesson({variables: {name:name, descr:descr, lessonId:props.id}})\r\n                        }}\r\n                        \r\n                        />\r\n                </div>\r\n                <div className=\"teacher-lesson__materials\">\r\n                    <div className=\"teacher-materials__heading\">Добавьте материалы к уроку</div>\r\n                    <div className=\"teacher-materials__content\">\r\n                        {parseMaterials(data)}\r\n                        <PlusButon OnClick={() => {}} \r\n                            link={`${url}/materials/create`}\r\n                            ></PlusButon>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"teacher-content__first-row second-row\">\r\n                <div className=\"teacher-lesson__descr\">\r\n                    <div className=\"teacher-lesson-theme__heading\">\r\n                        Описание урока\r\n                    </div>\r\n                    <textarea className=\"teacher-descr__input\" placeholder=\"Описание урока\" onChange = {(e:any) => {\r\n                        setDescr(e.target.value);\r\n                        console.log(descr)\r\n                        changeLesson({variables: {name:name, descr:e.target.value, lessonId:props.id}})\r\n                    } } value={descr}></textarea>\r\n                </div>\r\n                <div className=\"teacher-lesson__tests\">\r\n                    <div className=\"teacher-materials__heading\">Добавьте тесты к уроку</div>\r\n                    <div className=\"teacher-tests__content\">\r\n                        {parseTests(data, url)}\r\n                        <PlusButon OnClick={() => {}} link={`${url}/tests/create`}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    </div>\r\n\r\n    <Switch>\r\n        \r\n        <Route path={`${url}/materials/create`}>\r\n            <CreateMaterialWidget id={props.id}></CreateMaterialWidget>\r\n        </Route>\r\n\r\n        <Route path={`${url}/materials/:id`}>\r\n            <CreateMaterialWidget id={props.id}></CreateMaterialWidget>\r\n        </Route>\r\n    </Switch>\r\n\r\n</div>\r\n</div>\r\n        </Route>\r\n\r\n\r\n        </Switch>\r\n}\r\n\r\nexport const LessonDetails:react.FC = () => {\r\n    const {url} = useRouteMatch();\r\n    const {createWorkLink} = useContext(ChildContext);\r\n    const {id} = useParams<IEParams>();\r\n    const [ignored, forceUpdate] = useReducer(x => x+1, 0);\r\n    let {loading, data} = useGetLessonsInfoQuery({variables: {id:id}})\r\n    let [materials, setMaterials] = useState(data);\r\n    if (loading) return <div>loading...</div>;\r\n    function setData() {\r\n        forceUpdate()\r\n    }\r\n    return <TeacherContext.Provider value = {{changeMaterials:setData}}>\r\n            { createWorkLink == \"\" ? <ChildLessonDetail data={data?.lessons} id={id} url={url}></ChildLessonDetail> : \r\n            <TeacherLessonDetail url={url} data={data} id={id}></TeacherLessonDetail>}\r\n        </TeacherContext.Provider> \r\n\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\lessonWidget.tsx",[],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\createMaterial.tsx",["228","229","230"],"import react, {useState} from \"react\";\r\n\r\n\r\nimport \"../css/CreateMaterial.css\"\r\n\r\nimport {MyToogleButton} from \"../../uiKit/toggleButton\";\r\n\r\nimport {Switch, Route, useRouteMatch, useParams, useHistory} from \"react-router-dom\";\r\n\r\nimport {DefaultInput} from \"../../uiKit/Inputs\";\r\nimport {DefaultButton} from \"../../uiKit/Buttons\";\r\n\r\nimport {Editor} from \"../../uiKit/editor\";\r\n\r\nimport {\r\n    useMaterialQuery, \r\n    useChangeMaterialMutation, \r\n    useAddMaterialMutation\r\n} from \"../../generated/graphql\";\r\n\r\nimport cross from \"../../images/cross.svg\";\r\n\r\ninterface MaterialCreation{\r\n    id:string;\r\n    name?:string;\r\n    data?:string;\r\n    type?:string;\r\n    materialId?:string;\r\n} \r\n\r\ninterface MaterialParams{\r\n    type:string;\r\n}\r\n\r\n\r\n\r\nfunction returnRedaction(history:any, link:string){\r\n    let splittedLink = link.split(\"/\");\r\n    history.push(splittedLink.slice(0, splittedLink.length-2).join(\"/\"))\r\n}\r\n\r\nconst LinkMaterial:react.FC<MaterialCreation> = (props) => {\r\n    console.log(props)\r\n    const [name, setName] = useState(props.name)\r\n    const [link, setLink] = useState(props.data)\r\n    \r\n    const {url} = useRouteMatch();\r\n    const history = useHistory()\r\n    const [pushLink] = useAddMaterialMutation();\r\n    const [updateLink] = useChangeMaterialMutation();\r\n    return <div className=\"link-material__container\">\r\n        <p className=\"material-creation__text\">Название ссылки</p>\r\n        <DefaultInput value={name} class=\"material-creation__input\" handleChange={(e:any) => {\r\n            setName(e.target.value)}}\r\n        ></DefaultInput>\r\n        <p className=\"material-creation__text\">Ссылка</p>\r\n        <DefaultInput value={link} class=\"material-creation__input\" handleChange={(e:any) => {\r\n            setLink(e.target.value)\r\n        }}></DefaultInput>\r\n        <DefaultButton handleClick={() => {\r\n            props.materialId == undefined ? \r\n            pushLink({variables:{id:props.id, data:link!, type:\"link\", name:name!}}) :\r\n            updateLink({variables:{\r\n                id:props.materialId,\r\n                data:link!,\r\n                name:name!\r\n                }})\r\n            returnRedaction(history, url);\r\n            window.location.reload()\r\n        }}>Сохранить</DefaultButton>\r\n    </div>\r\n}\r\n\r\nconst MaterialMaterial:react.FC<MaterialCreation> = () => {\r\n    return <div className=\"link-material__container\">\r\n        <p className=\"material-creation__text\">Название</p>\r\n        <DefaultInput class=\"material-creation__input\"></DefaultInput>\r\n        <p className=\"material-creation__text\">Контент</p>\r\n        <Editor child={false}></Editor>\r\n        <DefaultButton handleClick={() => {}}>Сохранить</DefaultButton>\r\n    </div>\r\n}\r\n\r\nconst CreateMaterialWidgetContent:react.FC<MaterialCreation> = (props) => {\r\n    console.log(props, \"public props\")\r\n    const {type} = useParams<MaterialParams>();\r\n    let content = props.type! == \"link\" ? \r\n    <LinkMaterial \r\n        id={props.id}\r\n        name={props.name}\r\n        data={props.data}\r\n        materialId={props.materialId}\r\n    ></LinkMaterial> : \r\n    <MaterialMaterial\r\n    id={props.id}\r\n    name={props.name}\r\n    data={props.data}\r\n    ></MaterialMaterial>\r\n    switch (type) {\r\n        case \"link\":\r\n            content = <LinkMaterial id={props.id} materialId={props.materialId}></LinkMaterial>\r\n            break;\r\n        case \"material\":\r\n            content = <MaterialMaterial id={props.id}></MaterialMaterial>\r\n    }\r\n    return <div className=\"content-pading\">\r\n        {content}\r\n    </div> \r\n}\r\n\r\ninterface IEParams{\r\n    id?:string;\r\n}\r\n\r\nexport const CreateMaterialWidget:react.FC<MaterialCreation> = (props) => {\r\n    const {url} = useRouteMatch();\r\n    const {id} = useParams<IEParams>();\r\n    const {loading, data} = useMaterialQuery({variables:{id:id!}})\r\n    const history = useHistory();\r\n\r\n    if (loading) return <div>loading...</div>\r\n\r\n    return <div>\r\n\r\n\r\n        <div className=\"create-material__container-absolute\">\r\n        </div>\r\n        <div className=\"container-local__container\">\r\n            <div className=\"create-material__container-local\">\r\n            <div className=\"nav__container\">\r\n            { id == undefined ?    \r\n            <MyToogleButton handleChange = {() => {}} buttons = {[{name: \"ссылка\", link:`${url}/link`}, \r\n                        {name: \"материал\", link:`${url}/material`}]}></MyToogleButton> : <div></div>}\r\n            <img src={cross} alt=\"\" onClick={() => {returnRedaction(history, url)}}/>\r\n            </div>\r\n            \r\n            \r\n            <Switch>\r\n\r\n                <Route path={`${url}/:type`}>\r\n                    <CreateMaterialWidgetContent id={props.id} materialId={id}></CreateMaterialWidgetContent>\r\n                </Route>\r\n                <Route path={`${url}`}>\r\n                    <CreateMaterialWidgetContent id={props.id} \r\n                        data={data?.material?.data}\r\n                        name = {data?.material?.name}\r\n                        type = {data?.material?.Type} \r\n                        materialId = {id}\r\n                        ></CreateMaterialWidgetContent>    \r\n                </Route>\r\n            </Switch>\r\n            </div>\r\n        </div>\r\n    </div>\r\n     \r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\editor.jsx",["231"],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport {CKEditor} from \"@ckeditor/ckeditor5-react\";\r\n\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\n\r\nimport \"./css/editor.css\"\r\n\r\nexport const Editor = (props) => {\r\n    useEffect(() => {\r\n        let a = document.getElementsByClassName(\"ck-editor__top\")[0]\r\n        if (props.child) {\r\n            a.style = \"display:none!important\";\r\n        }\r\n    })\r\n\r\n    return <CKEditor\r\n        className=\"editor\"\r\n        editor={ClassicEditor}\r\n        data = {props.content}\r\n        disabled = {props.child}\r\n        onChange = {props.onChange}\r\n        plugins = {[]}\r\n        toolbar = {[\"imageInsert\"]}\r\n        config={{ckfinder: {\r\n            // Upload the images to the server using the CKFinder QuickUpload command\r\n            // You have to change this address to your server that has the ckfinder php connector\r\n            filebrowserBrowseUrl: '/ckfinder/ckfinder.html',\r\n\t\t\tfilebrowserImageBrowseUrl: '/ckfinder/ckfinder.html?type=Images',\r\n\t\t\tfilebrowserUploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files',\r\n\t\t\tfilebrowserImageUploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Images'\r\n        },\r\n        image : {\r\n                toolbar: [\"imageTextAlternative\"]\r\n        }\r\n\r\n    }}\r\n        \r\n        \r\n    >\r\n    </CKEditor>\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\toggleButton.tsx",["232"],"import React, {useState} from 'react';\r\nimport \"./css/Buttons.css\"\r\nimport { ToggleButton, ToggleButtonGroup} from '@material-ui/lab';\r\n\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface IEButton {\r\n    name:string;\r\n    link:string;\r\n}\r\n\r\ninterface ToogleConfig{\r\n    handleChange:Function;\r\n    buttons:Array<IEButton>;\r\n}\r\n\r\n\r\n\r\nexport const MyToogleButton : React.FC<ToogleConfig> = (props) =>{\r\n    let [active, setActive] = useState(false)\r\n    const TGbtn = {\r\n        fontFamily:  \"'Montserrat', sans-serif\",\r\n        background: \"#FFFFFF\",\r\n        border: \"1px solid #F5F5F5\",\r\n        borderRadius: \"10px\",\r\n        fontSize: \"20px\",\r\n        color:\"#000000\",\r\n        outline:\"none!important;\",\r\n        padding:\"20px;\",\r\n        width: \"220px\"\r\n    }\r\n\r\n    const TGbtnActive = {\r\n        background: \"#F5F5F5\",\r\n        border: \"none\",\r\n        fontFamily:  \"'Montserrat', sans-serif\",\r\n        fontSize: \"20px\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        letterSpacing: \"0.2px\",\r\n        color:\"#636363\",\r\n        borderRadius: \"10px\",\r\n        width: \"220px\"\r\n    }\r\n    const TGbtnGroup = {\r\n        border: \"none\",\r\n\r\n        background: \"#F5F5F5\",\r\n        borderRadius: \"10px\"\r\n        \r\n    }\r\n\r\n    let buttons = new  Array<JSX.Element>()\r\n    props.buttons.forEach((el) => {\r\n        buttons.push(\r\n            <Link to={el.link}>\r\n                <ToggleButton \r\n                onClick={(e) => setActive(!active)} \r\n                style={props.buttons.indexOf(el)==0?   active? TGbtn:TGbtnActive: !active? TGbtn:TGbtnActive} \r\n                value={el.name} aria-label={el.name}>\r\n                    {el.name}\r\n                </ToggleButton>\r\n            </Link>\r\n            \r\n            )\r\n      })\r\n    return(\r\n        <ToggleButtonGroup style={TGbtnGroup} orientation=\"horizontal\">\r\n            {buttons} \r\n        </ToggleButtonGroup>\r\n    );\r\n}\r\n","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\screens\\content\\testCreation.tsx",["233","234","235","236","237","238","239","240","241","242","243"],"import react, {useState} from \"react\";\r\n\r\nimport {\r\n    useCreateTestMutation,\r\n    useTestQuery, TestQuery,\r\n    useTaskTypeQuery, useAddTaskMutation,\r\n    useTaskQuery\r\n} from \"../../generated/graphql\"\r\n\r\nimport {\r\n    Redirect, useRouteMatch, useParams, Route, Switch, Link\r\n} from \"react-router-dom\";\r\nimport {\r\n    DefaultInput\r\n} from \"../../uiKit/Inputs\";\r\n\r\nimport \"../css/testCreation.css\"\r\n\r\nimport {Editor} from \"../../uiKit/editor\";\r\n\r\nimport {TextField} from \"@material-ui/core\";\r\nimport { DefaultButton } from \"../../uiKit/Buttons\";\r\n\r\n\r\ninterface IETesctCreate{\r\n    id:string;\r\n}\r\n\r\ninterface IEParams {\r\n    id:string;\r\n}\r\nfunction ParseQuestions(data:TestQuery){\r\n    let res = []\r\n\r\n    for (let task of data.test?.taskSet.edges!){\r\n        res.push(<div>{task?.node?.theory}</div>)\r\n    }\r\n\r\n    return res;\r\n}\r\nexport const TestCreateWidget:react.FC<IETesctCreate> = (props) => {\r\n    const [content, setContent] = useState(<div>loading...</div>)\r\n    const [flag, setFlag] = useState(false);\r\n    const {url} = useRouteMatch();\r\n    let croppedUrl = url.split(\"/\");\r\n    let urlPattern = croppedUrl.slice(0, croppedUrl.length-1).join(\"/\");\r\n    const [createTest] = useCreateTestMutation({variables: {lessonID:props.id}, \r\n        onCompleted: (data) => {\r\n            setContent(<Redirect to={`${urlPattern}/${data.createTest?.test?.id}`}></Redirect>)\r\n        }});\r\n    if (!flag){\r\n        setFlag(true)\r\n        createTest()\r\n        \r\n    }\r\n    return content;\r\n} \r\n\r\n\r\ninterface IETaskCard{\r\n    name:string;\r\n    Type:string;\r\n    time:string|\"нет\";\r\n    autoCheck:\"да\"|\"нет\";\r\n    points:string;\r\n}\r\n\r\n\r\nconst TaskCard:react.FC<IETaskCard> = (props) => {\r\n    return <div className=\"task-card__container\">\r\n        <div className=\"task-card__first-col\">\r\n            <div className=\"task-card__heading\">\r\n                {props.name}\r\n            </div>\r\n            <div className=\"task-card__time\">время: \r\n                <span className=\"colorize\">&nbsp; {props.time}</span></div>\r\n        </div>\r\n        <div className=\"task-card__first-col\">\r\n            <div className=\"answer__type\">\r\n                <span className=\"colorize\">\r\n                    {props.Type}\r\n                </span>\r\n            </div>\r\n            <div className=\"autoCheck__info\">\r\n                Автопроверка: &nbsp; <span className=\"colorize\">{props.autoCheck}</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"task-card__first-col points__container\">\r\n            <div className=\"points__heading\">\r\n                Баллы\r\n            </div>\r\n            <div className=\"points__content\">\r\n                {props.points}\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nfunction parseData(data:TestQuery, url:string){\r\n    let res = [];\r\n    console.log(data, \"data\")\r\n    for (let node of data.test?.taskSet.edges!){\r\n        res.push(<Link to={`${url}/task/${node?.node?.id}`}>\r\n            <TaskCard\r\n                name={node?.node?.theory!}\r\n                Type={node?.node?.Type.name!}\r\n                time={node?.node?.time!.toString() + \"s\"}\r\n                autoCheck={node?.node?.isAutocheck ? \"да\":\"нет\"}\r\n                points = {node?.node?.maxScore!.toString()!}\r\n            ></TaskCard>\r\n        </Link>)\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nconst AddTaskButton:react.FC = () => {\r\n    const {url} = useRouteMatch();\r\n    return <Link to={`${url}/create`} className=\"link\">\r\n                 <div className=\"add-task-button\">+</div>\r\n        </Link>\r\n}\r\n\r\ninterface IEAddQuestion{\r\n    testId:string;\r\n    link:string;\r\n}\r\n\r\nconst AddQuestion:react.FC<IEAddQuestion> = (props) => {\r\n    const [flag, setFlag] = useState(false);\r\n    const [content, setContent] = useState(<div>loading...</div>);\r\n    const [createTask] = useAddTaskMutation({\r\n        variables: \r\n        {\r\n            testId:props.testId\r\n        }, onCompleted: (data) => {\r\n            console.log(data);\r\n            setContent(\r\n                <Redirect to={`${props.link}/task/${data.createTask?.task?.id}`}>\r\n                </Redirect>)\r\n        }\r\n    })\r\n    if (!flag){\r\n        setFlag(true)\r\n        createTask()\r\n    }\r\n    \r\n    return content;\r\n}\r\n\r\ninterface IEHandleExtendedWriteAnswer{\r\n    data:string;\r\n}\r\n\r\nconst HandleExtendedWriteAnswer = (isAutoCheck:boolean, data:any) => {\r\n    console.log(data, isAutoCheck)\r\n    return <div className=\"ta__container\">\r\n        <Editor className=\"teacher__textarea\" content={(isAutoCheck ? data : \"\")} child={!isAutoCheck}>\r\n            \r\n        </Editor>\r\n    </div>\r\n\r\n}\r\n\r\nconst handleFunctions:Map<string, Function> = new Map(\r\n    [\r\n        [\"расширенный письменный ответ\", HandleExtendedWriteAnswer]\r\n    ]\r\n    \r\n    ) \r\n\r\n\r\nfunction parseHandlers(handler:Function|undefined, arg:any, isAutoCheck:boolean){\r\n    console.log(isAutoCheck)\r\n    try{\r\n        return handler!(isAutoCheck, arg)\r\n    } catch {\r\n        return <div>error...</div>\r\n    }\r\n}\r\n\r\nfunction reformatDate(sec:number) {\r\n    let minutes = (sec/60).toString()\r\n    let secs = (sec%60).toString()\r\n    if (minutes.length == 1) minutes = \"0\" + minutes\r\n    if (secs.length == 1) secs = \"0\" + secs\r\n    return minutes + \":\" + secs\r\n}\r\n\r\nfunction reformatDataToNumber(time:string){\r\n    let sep = time.split(\":\")\r\n    let minutes = Number(sep[0])\r\n    let secs = Number(sep[1])\r\n    console.log(minutes, secs)\r\n    return minutes * 60 + secs;\r\n}\r\n\r\nconst QuestionEditing:react.FC = () => {\r\n    const {id} = useParams<IEParams>();\r\n    const {loading, data} = useTaskQuery({variables: {taskId:id}})\r\n    const [flag, setFlag] = useState(false)\r\n    const [theory, setTheory] = useState(data?.task?.theory)\r\n    const [isAutoChecked, setChecked] = useState(data?.task?.isAutocheck);\r\n    const [Type, setType] = useState(data?.task?.Type.name);\r\n    const [isTiming, setIsTiming] = useState(data?.task?.isTiming)\r\n    const [points, setPoints] = useState(data?.task?.maxScore)\r\n    const [time, setTime] = useState(data?.task?.time)\r\n    const handler:Function = handleFunctions.get(Type!)!\r\n    console.log(handler, \"handler\", Type)\r\n    console.log(data)\r\n    if (loading) return <div>loading...</div>\r\n    if (!flag){\r\n        setFlag(true)\r\n        setType(data?.task?.Type.name)\r\n        setChecked(data?.task?.isAutocheck)\r\n        setIsTiming(data?.task?.isTiming);\r\n        console.log(handler, \"handler\", Type, data, isAutoChecked)\r\n\r\n    }\r\n    return <div className=\"question-editing__container\">\r\n        <div className=\"name__heading\">Формулировка Задания</div>\r\n        <Editor onChange={(event:any, editor:any) => {\r\n            setTheory(editor.getData());}}\r\n            content={data?.task?.theory!}>\r\n        </Editor>\r\n        <div className=\"name__heading\">Само задание</div>\r\n        <select className=\"selected\" onChange={(e) => {setType(e.target.value)}}>\r\n            {data?.taskTypes?.edges?.map((e) => {\r\n                return <option selected = \r\n                 {e?.node?.name == data.task?.Type.name}>{e?.node?.name}</option>})}\r\n        </select>\r\n        <div className=\"checkbox__container\">\r\n            <input type=\"checkbox\"\r\n                onChange = {(e:any) => {\r\n                    setChecked(e.target.checked); console.log(e.target.checked)\r\n                }}/>Автопроверка\r\n        </div>\r\n        <div className=\"answer__content\">\r\n            {\r\n            isAutoChecked ? <div className=\"answer-autoCheck__heading\">Введите правильный ответ</div> : \r\n                <div className=\"answer-autoCheck__heading\">Как будет выглядеть задание у учеников</div>\r\n            }\r\n            {parseHandlers(handleFunctions.get(Type!)!, data?.task?.autoCheckData, isAutoChecked!)}\r\n\r\n        </div>\r\n        <div className=\"timing checkbox__container\">\r\n            <input type=\"checkbox\" checked={isTiming!} onChange={(e) => {setIsTiming(e.target.checked)}}/>Вопрос на время?\r\n            <TextField\r\n            type=\"time\"\r\n            defaultValue={reformatDate(300)}\r\n            className=\"timePicker\"\r\n            disabled={!isTiming}\r\n            onChange = {(e) => {setTime(reformatDataToNumber(e.target.value))}}\r\n            >\r\n\r\n            </TextField>\r\n        </div>\r\n        <div className=\"how-many-points\">\r\n            <div className=\"points__label checkbox__container\">Сколько макимум баллов:</div>\r\n            <input type=\"number\" onChange={(e) => {}} min={0} step={1} pattern={\"\\d*\"}/>\r\n        </div>\r\n\r\n        <div className=\"save\">\r\n            <DefaultButton handleClick={() => {}} class=\"name__input\">Сохранить</DefaultButton>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const TestCreation:react.FC = () => {\r\n    const {id} = useParams<IEParams>();\r\n    const {loading, data} = useTestQuery({variables: {testId:id}})\r\n    const [name, setName] = useState(data?.test?.name)\r\n    const {url} = useRouteMatch();\r\n    if (loading) return <div>loading...</div>\r\n    console.log(data);\r\n    return <Switch>\r\n            <Route path={`${url}/create`}>\r\n                <AddQuestion testId={id} link={url}></AddQuestion>\r\n            </Route>\r\n            <Route path={`${url}/task/:id`}>\r\n                <QuestionEditing></QuestionEditing>\r\n            </Route>\r\n        <Route path={`${url}`}>\r\n            <div className=\"test-creation__container\">\r\n                <div className=\"name__heading\">\r\n                    Название теста\r\n                </div>\r\n                <DefaultInput class=\"name__input\" value={name} handleChange={\r\n                    (e:any) => {setName(e.target.value)}} placeHolder=\"начните вводить...\"></DefaultInput>\r\n                <div className=\"name__heading\">\r\n                    Задания теста\r\n                </div>\r\n                {parseData(data!, url)}\r\n                <AddTaskButton></AddTaskButton>\r\n            </div>\r\n        </Route>\r\n\r\n    </Switch>\r\n\r\n}","C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\Calendar.jsx",["244","245","246","247","248","249","250"],"C:\\Users\\ilvsl\\evgen-app\\evgen-app-ui\\src\\uiKit\\timestamp.jsx",[],{"ruleId":"251","severity":1,"message":"252","line":1,"column":8,"nodeType":"253","messageId":"254","endLine":1,"endColumn":13},{"ruleId":"251","severity":1,"message":"255","line":5,"column":9,"nodeType":"253","messageId":"254","endLine":5,"endColumn":13},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":7,"column":5,"nodeType":"253","messageId":"254","endLine":7,"endColumn":13},{"ruleId":"260","severity":1,"message":"262","line":18,"column":9,"nodeType":"253","messageId":"254","endLine":18,"endColumn":19},{"ruleId":"260","severity":1,"message":"263","line":20,"column":9,"nodeType":"253","messageId":"254","endLine":20,"endColumn":19},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"251","severity":1,"message":"264","line":7,"column":9,"nodeType":"253","messageId":"254","endLine":7,"endColumn":21},{"ruleId":"251","severity":1,"message":"265","line":22,"column":12,"nodeType":"253","messageId":"254","endLine":22,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":25,"column":55,"nodeType":"268","messageId":"269","endLine":25,"endColumn":57},{"ruleId":"270","severity":1,"message":"271","line":41,"column":21,"nodeType":"272","endLine":41,"endColumn":35},{"ruleId":"270","severity":1,"message":"273","line":44,"column":21,"nodeType":"272","endLine":44,"endColumn":42},{"ruleId":"251","severity":1,"message":"274","line":58,"column":16,"nodeType":"253","messageId":"254","endLine":58,"endColumn":20},{"ruleId":"251","severity":1,"message":"275","line":58,"column":22,"nodeType":"253","messageId":"254","endLine":58,"endColumn":28},{"ruleId":"266","severity":1,"message":"267","line":64,"column":47,"nodeType":"268","messageId":"269","endLine":64,"endColumn":49},{"ruleId":"251","severity":1,"message":"276","line":7,"column":9,"nodeType":"253","messageId":"254","endLine":7,"endColumn":17},{"ruleId":"251","severity":1,"message":"277","line":8,"column":9,"nodeType":"253","messageId":"254","endLine":8,"endColumn":19},{"ruleId":"251","severity":1,"message":"278","line":12,"column":9,"nodeType":"253","messageId":"254","endLine":12,"endColumn":25},{"ruleId":"251","severity":1,"message":"279","line":28,"column":9,"nodeType":"253","messageId":"254","endLine":28,"endColumn":14},{"ruleId":"251","severity":1,"message":"280","line":43,"column":21,"nodeType":"253","messageId":"254","endLine":43,"endColumn":26},{"ruleId":"251","severity":1,"message":"281","line":17,"column":27,"nodeType":"253","messageId":"254","endLine":17,"endColumn":31},{"ruleId":"251","severity":1,"message":"282","line":1,"column":16,"nodeType":"253","messageId":"254","endLine":1,"endColumn":24},{"ruleId":"251","severity":1,"message":"283","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":16},{"ruleId":"251","severity":1,"message":"284","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":23},{"ruleId":"266","severity":1,"message":"267","line":25,"column":53,"nodeType":"268","messageId":"269","endLine":25,"endColumn":55},{"ruleId":"266","severity":1,"message":"267","line":27,"column":56,"nodeType":"268","messageId":"269","endLine":27,"endColumn":58},{"ruleId":"285","severity":1,"message":"286","line":33,"column":79,"nodeType":"272","endLine":33,"endColumn":99},{"ruleId":"251","severity":1,"message":"287","line":37,"column":11,"nodeType":"253","messageId":"254","endLine":37,"endColumn":23},{"ruleId":"251","severity":1,"message":"288","line":1,"column":10,"nodeType":"253","messageId":"254","endLine":1,"endColumn":14},{"ruleId":"251","severity":1,"message":"283","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":15,"column":47,"nodeType":"268","messageId":"269","endLine":15,"endColumn":49},{"ruleId":"266","severity":1,"message":"289","line":18,"column":42,"nodeType":"268","messageId":"269","endLine":18,"endColumn":44},{"ruleId":"251","severity":1,"message":"276","line":8,"column":5,"nodeType":"253","messageId":"254","endLine":8,"endColumn":13},{"ruleId":"251","severity":1,"message":"290","line":14,"column":9,"nodeType":"253","messageId":"254","endLine":14,"endColumn":25},{"ruleId":"251","severity":1,"message":"291","line":22,"column":11,"nodeType":"253","messageId":"254","endLine":22,"endColumn":20},{"ruleId":"251","severity":1,"message":"283","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":16},{"ruleId":"251","severity":1,"message":"292","line":10,"column":10,"nodeType":"253","messageId":"254","endLine":10,"endColumn":17},{"ruleId":"266","severity":1,"message":"267","line":45,"column":51,"nodeType":"268","messageId":"269","endLine":45,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":45,"column":101,"nodeType":"268","messageId":"269","endLine":45,"endColumn":103},{"ruleId":"266","severity":1,"message":"267","line":47,"column":40,"nodeType":"268","messageId":"269","endLine":47,"endColumn":42},{"ruleId":"266","severity":1,"message":"267","line":47,"column":68,"nodeType":"268","messageId":"269","endLine":47,"endColumn":70},{"ruleId":"285","severity":1,"message":"286","line":52,"column":13,"nodeType":"272","endLine":52,"endColumn":48},{"ruleId":"266","severity":1,"message":"267","line":82,"column":60,"nodeType":"268","messageId":"269","endLine":82,"endColumn":62},{"ruleId":"266","severity":1,"message":"267","line":88,"column":56,"nodeType":"268","messageId":"269","endLine":88,"endColumn":58},{"ruleId":"293","severity":1,"message":"294","line":88,"column":186,"nodeType":"268","messageId":"295","endLine":88,"endColumn":187},{"ruleId":"266","severity":1,"message":"267","line":89,"column":34,"nodeType":"268","messageId":"269","endLine":89,"endColumn":36},{"ruleId":"296","severity":1,"message":"297","line":93,"column":84,"nodeType":"298","endLine":93,"endColumn":96},{"ruleId":"266","severity":1,"message":"267","line":121,"column":60,"nodeType":"268","messageId":"269","endLine":121,"endColumn":62},{"ruleId":"266","severity":1,"message":"267","line":126,"column":58,"nodeType":"268","messageId":"269","endLine":126,"endColumn":60},{"ruleId":"266","severity":1,"message":"267","line":127,"column":221,"nodeType":"268","messageId":"269","endLine":127,"endColumn":223},{"ruleId":"299","severity":1,"message":"300","line":144,"column":18,"nodeType":"301","messageId":"302","endLine":144,"endColumn":29,"fix":"303"},{"ruleId":"251","severity":1,"message":"304","line":16,"column":10,"nodeType":"253","messageId":"254","endLine":16,"endColumn":16},{"ruleId":"266","severity":1,"message":"289","line":90,"column":36,"nodeType":"268","messageId":"269","endLine":90,"endColumn":38},{"ruleId":"251","severity":1,"message":"305","line":1,"column":28,"nodeType":"253","messageId":"254","endLine":1,"endColumn":35},{"ruleId":"251","severity":1,"message":"306","line":1,"column":59,"nodeType":"253","messageId":"254","endLine":1,"endColumn":68},{"ruleId":"251","severity":1,"message":"307","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":14},{"ruleId":"251","severity":1,"message":"308","line":14,"column":5,"nodeType":"253","messageId":"254","endLine":14,"endColumn":27},{"ruleId":"251","severity":1,"message":"309","line":15,"column":5,"nodeType":"253","messageId":"254","endLine":15,"endColumn":21},{"ruleId":"251","severity":1,"message":"304","line":27,"column":10,"nodeType":"253","messageId":"254","endLine":27,"endColumn":16},{"ruleId":"251","severity":1,"message":"310","line":78,"column":10,"nodeType":"253","messageId":"254","endLine":78,"endColumn":27},{"ruleId":"251","severity":1,"message":"311","line":117,"column":12,"nodeType":"253","messageId":"254","endLine":117,"endColumn":27},{"ruleId":"251","severity":1,"message":"312","line":186,"column":12,"nodeType":"253","messageId":"254","endLine":186,"endColumn":22},{"ruleId":"251","severity":1,"message":"313","line":190,"column":18,"nodeType":"253","messageId":"254","endLine":190,"endColumn":25},{"ruleId":"251","severity":1,"message":"314","line":302,"column":12,"nodeType":"253","messageId":"254","endLine":302,"endColumn":19},{"ruleId":"251","severity":1,"message":"315","line":304,"column":10,"nodeType":"253","messageId":"254","endLine":304,"endColumn":19},{"ruleId":"251","severity":1,"message":"316","line":304,"column":21,"nodeType":"253","messageId":"254","endLine":304,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":310,"column":30,"nodeType":"268","messageId":"269","endLine":310,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":61,"column":30,"nodeType":"268","messageId":"269","endLine":61,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":87,"column":31,"nodeType":"268","messageId":"269","endLine":87,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":131,"column":18,"nodeType":"268","messageId":"269","endLine":131,"endColumn":20},{"ruleId":"260","severity":1,"message":"282","line":1,"column":27,"nodeType":"253","messageId":"254","endLine":1,"endColumn":35},{"ruleId":"266","severity":1,"message":"267","line":59,"column":49,"nodeType":"268","messageId":"269","endLine":59,"endColumn":51},{"ruleId":"251","severity":1,"message":"317","line":6,"column":5,"nodeType":"253","messageId":"254","endLine":6,"endColumn":21},{"ruleId":"251","severity":1,"message":"318","line":32,"column":10,"nodeType":"253","messageId":"254","endLine":32,"endColumn":24},{"ruleId":"251","severity":1,"message":"319","line":152,"column":11,"nodeType":"253","messageId":"254","endLine":152,"endColumn":38},{"ruleId":"266","severity":1,"message":"267","line":186,"column":24,"nodeType":"268","messageId":"269","endLine":186,"endColumn":26},{"ruleId":"266","severity":1,"message":"267","line":187,"column":21,"nodeType":"268","messageId":"269","endLine":187,"endColumn":23},{"ruleId":"251","severity":1,"message":"320","line":203,"column":12,"nodeType":"253","messageId":"254","endLine":203,"endColumn":18},{"ruleId":"251","severity":1,"message":"321","line":207,"column":12,"nodeType":"253","messageId":"254","endLine":207,"endColumn":18},{"ruleId":"251","severity":1,"message":"322","line":207,"column":20,"nodeType":"253","messageId":"254","endLine":207,"endColumn":29},{"ruleId":"251","severity":1,"message":"323","line":208,"column":12,"nodeType":"253","messageId":"254","endLine":208,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":231,"column":33,"nodeType":"268","messageId":"269","endLine":231,"endColumn":35},{"ruleId":"324","severity":1,"message":"325","line":261,"column":82,"nodeType":"326","messageId":"327","endLine":261,"endColumn":83,"suggestions":"328"},{"ruleId":"260","severity":1,"message":"329","line":9,"column":7,"nodeType":"253","messageId":"254","endLine":9,"endColumn":14},{"ruleId":"260","severity":1,"message":"330","line":49,"column":12,"nodeType":"253","messageId":"254","endLine":49,"endColumn":22},{"ruleId":"260","severity":1,"message":"331","line":53,"column":12,"nodeType":"253","messageId":"254","endLine":53,"endColumn":22},{"ruleId":"260","severity":1,"message":"332","line":70,"column":9,"nodeType":"253","messageId":"254","endLine":70,"endColumn":11},{"ruleId":"260","severity":1,"message":"329","line":72,"column":11,"nodeType":"253","messageId":"254","endLine":72,"endColumn":18},{"ruleId":"260","severity":1,"message":"333","line":73,"column":11,"nodeType":"253","messageId":"254","endLine":73,"endColumn":20},{"ruleId":"334","severity":1,"message":"300","line":81,"column":18,"nodeType":"301","messageId":"335","endLine":81,"endColumn":29},"@typescript-eslint/no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","no-native-reassign",["336"],"no-negated-in-lhs",["337"],"no-unused-vars","'Redirect' is defined but never used.","'ChildLobby' is defined but never used.","'checkToken' is defined but never used.","'DefaultInput' is defined but never used.","'path' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Login_inputs must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Registration_inputs must be in PascalCase or SCREAMING_SNAKE_CASE","'type' is assigned a value but never used.","'action' is assigned a value but never used.","'useQuery' is defined but never used.","'getUserOrg' is defined but never used.","'IEDataProcessing' is defined but never used.","'links' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'CSSProperties' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ToogleConfig' is defined but never used.","'type' is defined but never used.","Expected '!==' and instead saw '!='.","'subjectInfoQuery' is defined but never used.","'QueryData' is defined but never used.","'TaskRow' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/style-prop-object","Style prop value must be an object","JSXAttribute","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"338","text":"339"},"'create' is defined but never used.","'Context' is defined but never used.","'useEffect' is defined but never used.","'client' is defined but never used.","'GetLessonsInfoDocument' is defined but never used.","'UserInfoDocument' is defined but never used.","'parseTeacherTests' is defined but never used.","'changeMaterials' is assigned a value but never used.","'createTest' is assigned a value but never used.","'setData' is assigned a value but never used.","'ignored' is assigned a value but never used.","'materials' is assigned a value but never used.","'setMaterials' is assigned a value but never used.","'useTaskTypeQuery' is defined but never used.","'ParseQuestions' is defined but never used.","'IEHandleExtendedWriteAnswer' is defined but never used.","'theory' is assigned a value but never used.","'points' is assigned a value but never used.","'setPoints' is assigned a value but never used.","'time' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\d.","Literal","unnecessaryEscape",["340","341"],"'appRoot' is assigned a value but never used.","'handleShow' is defined but never used.","'handleHide' is defined but never used.","'el' is assigned a value but never used.","'modalRoot' is assigned a value but never used.","no-array-constructor","preferLiteral","no-global-assign","no-unsafe-negation",[5534,5545],"[]",{"messageId":"342","fix":"343","desc":"344"},{"messageId":"345","fix":"346","desc":"347"},"removeEscape",{"range":"348","text":"349"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"350","text":"351"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[8402,8403],"",[8402,8402],"\\"]