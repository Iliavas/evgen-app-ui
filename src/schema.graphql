query getLessonsInfo($id:ID!) {
    lessons(id:$id){
      name, content, descr,
      typeLesson{
        name,
        group{
          name
        }
      }
      tests{
        name, id, taskLen, deadline
      },
      materials{
        name, data, id
      }
    }
}

query getSubjectLessons($id:ID!){
    subjectClass(id:$id){
      name, group{
        name
      }
      lessonSet{
        edges{
          node{
            name, descr, testsLen, materialsLen, timeLesson, id
          }
        }
      }
    }
}
query userInfo($id:String!){
    userInfo(token:$id){
        profile{
            childSet{
                edges{
                    node{
                        id, pk
                        org{
                            name,
                            classesLength,
                            childrenLength, 
                            subjects
                        }
                    }
                }
            }
            teacherSet{
                edges{
                    node{
                        id, pk
                        org{
                            name,
                            classesLength,
                            childrenLength, 
                            subjects
                        }
                    }
                }
            }
        }
    }
}

query getAnswerData($answerSheetId:ID!, $number:Int){
  answerSheet(id:$answerSheetId) {
    answerSet(number:$number){
      edges{
        node{
          content
        }
      }
    }
  }
}

query childSubjects($id:ID!){
    child(id:$id){
      name, pk
      groups{
        edges{
          node{
            name,
            classes{
              name, id
              teachersSet{
                name
              }
            }
          }
        }
      }
    }
}  

query getTeacherClasses($id:ID!){
    teacher(id:$id){
      subjectclasslocalSet{
        edges{
          node{
            id,
            name, lessonsLen, group{
              name, childrenLen
            }
          }
        }
      } 
    }
}

query material($id:ID!){
  material(id:$id) {
    name, data, Type
  }
}

query test($testId:ID!){
	test(id:$testId){
    name, deadline
    taskSet{
      edges{
        node{
          theory, practise, number, maxScore, id, isTiming, time, Type{name}, isAutocheck
        }
      }
    }
  }
}

query taskType{
  taskTypes{
    edges{
      node{
        name, id
      }
    }
  }
}

query task($taskId:ID!){
  task(id:$taskId){
    theory, practise, maxScore, isTiming, time, Type{name, id}, isAutocheck, autoCheckData,
  }
  taskTypes{
    edges{
      node{
        name, id
      }
    }
  }
}

query Childtest($testId:ID!){
  test(id:$testId){
    lesson{
      typeLesson{
        name
      }
    },
    name, taskSet{
      edges{
        node{
          theory, practise, isTiming, Type{name, id}, time,
        }
      }
    }
  }
}
query allTeacherTest($teacherID:ID!){
  teacher(id:$teacherID){
    subjectclasslocalSet{
      edges{
        node{
          name
          lessonSet{
            edges{
              node{
                tests{
                  id, name, taskLen, answerLen
                }
              }
            }
          }
        }
      }
    }
  }
}

query testDetail($testId:ID!){
  test(id:$testId){
    answersheetSet{
      edges{
        node{
          id,
          child{
            name, surname,
          }
          answerSet{
            edges{
              node{
                completed
                number
                score              }
            }
          }
        }
      }
    }
  }
}

query answerTeacherDetail($answerId:ID, $number:Int){
  allAnswer(sheet:$answerId, number:$number){
    edges{
      node{
        content,
        score,
        sheet{
          test{
            taskSet(number:$number){
              edges{
                node{
                  maxScore,
                  Type {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

mutation getTokenByNameAndPassword($username:String!, $password:String!){
    tokenAuth(username:$username, password:$password){
      token
    }
}

mutation registerUser($username:String!, $password:String!){
    registerUser(input:{username:$username, password:$password}){
      ok
    }
}


mutation addMaterial($id:ID!, $data:String!, $type:String!, $name:String!){
  createMaterial(data:$data, lessonId:$id, lessonType:$type, name:$name){
    material{
      data
    }
  }
}

mutation changeMaterial($id:ID!, $data:String!, $name:String!){
  changeMaterial(materialId:$id, name:$name, data:$data){
    material{
      name, data
    }
  }
}

mutation deleteMaterial($id:ID!){
  deleteMaterial(materialId:$id){
    ok
  }
}

mutation changelesson($lessonId:ID!, $descr:String!, $name:String!){
  updateLessonRegistration(id:$lessonId, descr:$descr, name:$name){
    ok
  }
}

mutation createTest($lessonID:ID!){
  createTest(name:"", lessonId:$lessonID){
    test{
      id
    }
  }
}

mutation addTask($testId:ID!, $number:Int){
  createTask(testId:$testId, theory:"", practise:"", number:$number, maxScore: 0, Type:"VGFza1R5cGVUeXBlOjQ="){
    task{
      theory, id, pk
    }
  }
}

mutation changeTask($Type:ID!, $autoCheck:Boolean!, $theory:String!, $time:Int!
  	$autoCheckData:String!, $isTime:Boolean!, $maxScore:Int!, $practise:String!, $taskId:ID!){
  updateTask(Type:$Type, autoCheck:$autoCheck
    autoCheckData:$autoCheckData, isTime:$isTime, maxScore:$maxScore, number:1, practise:$practise,
  	theory:$theory, time:$time, taskId:$taskId){
      task{
        theory, practise, number, maxScore, isTiming, time, isAutocheck, autoCheckData, 
      }
    }
}

mutation changeTestName($name:String!, $testId:ID!){
  updateTestRegistration(name:$name, testId:$testId){
    test{
      name
    }
  }
}

mutation deleteTest($testId:ID!) {
  deleteTest(testId:$testId) {
    ok
  }
}

mutation createLesson($subjectId:ID!){
  createLesson(subject:$subjectId, name:"", descr:"") {
    ok, lesson{
      id
    }
  }
}

mutation deleteLesson($ID:ID!){
  deleteLesson(id:$ID){
    ok
  }
}

mutation createSheet($child:ID!, $test:ID!){
  createAnwerSheet(child:$child, test:$test){
    answer{
      id
    }
  }
}

mutation createAnswer($sheet:ID!, $data:String, $number:Int){
  createAnswer(data:$data, sheet:$sheet, number:$number){
    answer{
      content, id
    }
  }
}

mutation scoring($answerSheetId:ID!, $score:Int, $number:Int){
 	scoringTasks(score:$score, answerSheetId:$answerSheetId, number:$number) {
  	answer{
    	score
  	}
	}
}