query getLessonsInfo($id:ID!) {
    lessons(id:$id){
      name, content, descr,
      typeLesson{
        name,
        group{
          name
        }
      }
      tests{
        name, id, taskLen, deadline
      },
      materials{
        name, data, id
      }
    }
}

query getSubjectLessons($id:ID!){
    subjectClass(id:$id){
      name, group{
        name
      }
      lessonSet{
        edges{
          node{
            name, descr, testsLen, materialsLen, timeLesson, id
          }
        }
      }
    }
}
query userInfo($id:String!){
    userInfo(token:$id){
        profile{
            childSet{
                edges{
                    node{
                        id, pk
                        org{
                            name,
                            classesLength,
                            childrenLength, 
                            subjects
                        }
                    }
                }
            }
            teacherSet{
                edges{
                    node{
                        id, pk
                        org{
                            name,
                            classesLength,
                            childrenLength, 
                            subjects
                        }
                    }
                }
            }
        }
    }
}

query childSubjects($id:ID!){
    child(id:$id){
      name, pk
      groups{
        edges{
          node{
            name,
            classes{
              name, id
              teachersSet{
                name
              }
            }
          }
        }
      }
    }
}  

query getTeacherClasses($id:ID!){
    teacher(id:$id){
      subjectclasslocalSet{
        edges{
          node{
            id,
            name, lessonsLen, group{
              name, childrenLen
            }
          }
        }
      } 
    }
}

query material($id:ID!){
  material(id:$id) {
    name, data, Type
  }
}

query test($testId:ID!){
	test(id:$testId){
    name, deadline
    taskSet{
      edges{
        node{
          theory, practise, number, maxScore, id, isTiming, time, Type{name}, isAutocheck
        }
      }
    }
  }
}

query taskType{
  taskTypes{
    edges{
      node{
        name, id
      }
    }
  }
}

query task($taskId:ID!){
  task(id:$taskId){
    theory, practise, maxScore, isTiming, time, Type{name}, isAutocheck, autoCheckData
  }
  taskTypes{
    edges{
      node{
        name
      }
    }
  }
}

mutation getTokenByNameAndPassword($username:String!, $password:String!){
    tokenAuth(username:$username, password:$password){
      token
    }
}

mutation registerUser($username:String!, $password:String!){
    registerUser(input:{username:$username, password:$password}){
      ok
    }
}


mutation addMaterial($id:ID!, $data:String!, $type:String!, $name:String!){
  createMaterial(data:$data, lessonId:$id, lessonType:$type, name:$name){
    material{
      data
    }
  }
}

mutation changeMaterial($id:ID!, $data:String!, $name:String!){
  changeMaterial(materialId:$id, name:$name, data:$data){
    material{
      name, data
    }
  }
}

mutation deleteMaterial($id:ID!){
  deleteMaterial(materialId:$id){
    ok
  }
}

mutation changelesson($lessonId:ID!, $descr:String!, $name:String!){
  updateLessonRegistration(id:$lessonId, descr:$descr, name:$name){
    ok
  }
}

mutation createTest($lessonID:ID!){
  createTest(name:"", lessonId:$lessonID){
    test{
      id
    }
  }
}

mutation addTask($testId:ID!){
  createTask(testId:$testId, theory:"", practise:"", number:1, maxScore: 0, Type:"VGFza1R5cGVUeXBlOjQ="){
    task{
      theory, id, pk
    }
  }
}
